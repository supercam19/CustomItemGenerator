
import "./public/lib/jszip/dist/jszip.js";


export const zip = new JSZip();

var UUID = [Math.random() * 10000, Math.random() * 10000, Math.random() * 10000, Math.random() * 10000]

window.generatePack = function() {
    let item_name = document.getElementById("name").value;
    let code_name = item_name.replace(" ", "_").toLowerCase();
    // check if code name has the regex [A-Za-z0-9]
    if (!code_name.match(/^[A-Za-z0-9_]+$/)) {
        code_name = "custom_item"
    }
    let item_name_bold = document.getElementById("name-style-bold").checked;
    let item_name_italic = document.getElementById("name-style-italic").checked;
    let item_name_underline = document.getElementById("name-style-underline").checked;
    let item_name_strikethrough = document.getElementById("name-style-strikethrough").checked;
    let item_name_obfuscated = document.getElementById("name-style-obfuscated").checked;
    let item_name_color = document.getElementById("name-style-color").value;
    let item_desc = document.getElementById("description").value;
    let item_desc_bold = document.getElementById("desc-style-bold").checked;
    let item_desc_italic = document.getElementById("desc-style-italic").checked;
    let item_desc_underline = document.getElementById("desc-style-underline").checked;
    let item_desc_strikethrough = document.getElementById("desc-style-strikethrough").checked;
    let item_desc_obfuscated = document.getElementById("desc-style-obfuscated").checked;
    let item_desc_color = document.getElementById("desc-style-color").value;

    let base_item = document.getElementById("base-item").value;
    let override_item = document.getElementById("base-item-override").value;
    let right_click = document.getElementById("configuration-right-click").value;
    let on_hit = document.getElementById("configuration-on-hit").value;
    let on_kill = document.getElementById("configuration-on-kill").value;
    let attributes = document.getElementById("configuration-attributes").value;
    let base_item_override = document.getElementById("base-item-override").value;
    let right_click_action = document.getElementById("right-click-action").value;
    let right_click_function = document.getElementById("right-click-function").value;
    let right_click_commands = document.getElementById("right-click-commands").value;
    let on_hit_action = document.getElementById("on-hit-action").value;
    let on_hit_function = document.getElementById("on-hit-function").value;
    let on_hit_commands = document.getElementById("on-hit-commands").value;
    let on_kill_action = document.getElementById("on-kill-action").value;
    let on_kill_function = document.getElementById("on-kill-function").value;
    let on_kill_commands = document.getElementById("on-kill-commands").value;
    



    let damage = document.getElementById("damage").value;
    let attack_speed = document.getElementById("attack-speed").value;
    let unbreakable = document.getElementById("unbreakable").checked;
    let custom_model_data = document.getElementById("custom-model-data").value;
    let max_durability = document.getElementById("durability-max").value;

    let data = zip.folder("data");
    let packmeta = {
        pack: {
            pack_format: 11,
            description: "Generated by the Custom Items Generator"
        }
    }
    let mcmeta = zip.file("pack.mcmeta", JSON.stringify(packmeta))
    let vanilla = data.folder("minecraft").folder("tags").folder("functions")
    let namespace = data.folder(code_name)
    let functions = namespace.folder("functions")
    if (right_click_action == "commands") {
        let func_right_click = functions.file("right_click.mcfunction", document.getElementById("right-click-commands").value + `\nscoreboard players @a set ${code_name}_rcd 0`)
        let right_click_method = "function custom-item:right_click"
        let func_load = functions.file("load.mcfunction", `scoreboard objectives add ${code_name}_rcd minecraft.used:minecraft.${base_item}`)
        let func_tick = functions.file("tick.mcfunction", `execute as @a if score @s ${code_name}_rcd matches 1.. run ${right_click_method}`)
    }
    else if (right_click_action == "function") {
        let right_click_method = "function " + document.getElementById("right-click-function").value
        let func_load = functions.file("load.mcfunction", `scoreboard objectives add ${code_name}_rcd minecraft.used:minecraft.${base_item}`)
        let func_tick = functions.file(`tick.mcfunction", "execute as @a if score @s ${code_name}_rcd matches 1.. run ${right_click_method}`)
    }
    else {
        let right_click_method = "none"
    }
    
    if (right_click_action != "none") {
        let loader = {
            "values": [
                `${code_name}:load`
            ]
        }
        let ticker = {
            "values": [
                `${code_name}:tick`
            ]
        }
        let load = vanilla.file("load.json", JSON.stringify(loader))
        let tick = vanilla.file("tick.json", JSON.stringify(ticker))
    }
    if (on_hit_action == "commands") {
        let func_on_hit = functions.file("on_hit.mcfunction", document.getElementById("on-hit-commands").value)
        let on_hit_method = "function custom-item:on_hit"
    }
    else if (on_hit_action == "function") {
        let on_hit_method = "function " + document.getElementById("on-hit-function").value
    }
    else {
        let on_hit_method = "none"
    }
    if (on_hit_action && on_kill_action != "none") {
        let advancements = namespace.folder("advancements")
    }

    if (on_kill_action == "commands") {
        let func_on_kill = functions.file("on_kill.mcfunction", document.getElementById("on-kill-commands").value)
        let on_kill_method = "function custom-item:on_kill"
    }
    else if (on_kill_action == "function") {
        let on_kill_method = "function " + document.getElementById("on-kill-function").value
    }
    else {
        let on_kill_method = "none"
    }

    let true_base_item = base_item
    if (override_item != "") {
        true_base_item = override_item
    }
    
    let give_item = `give @s ${true_base_item}{display:{Name:'{"text":"${item_name}","bold":${item_name_bold},"italic":${item_name_italic},"underlined":${item_name_underline},"strikethrough":${item_name_strikethrough},"obfuscated":${item_name_obfuscated},"color":"${item_name_color}"}',Lore:['{"text":"${item_desc}","bold":${item_desc_bold},"italic":${item_desc_italic},"underlined":${item_desc_underline},"strikethrough":${item_desc_strikethrough},"obfuscated":${item_desc_obfuscated},"color":"${item_desc_color}"}']},CustomModelData:${custom_model_data},Unbreakable:${+unbreakable}b, AttributeModifiers:[{AttributeName:"generic.attack_damage",Name:"generic.attack_damage",Amount:${damage},Operation:0, Slot:mainhand, UUID:${window.UUID_toString()}},{AttributeName:"generic.attack_speed",Name:"generic.attack_speed",Amount:${attack_speed},Operation:0, Slot:mainhand, UUID:${window.UUID_toString()}}],Damage:${max_durability}, id:"${code_name}"}`
    let func_give = functions.file("give.mcfunction", give_item)
    zip.generateAsync({type: "blob"}).then(function(blob) {
        let url = URL.createObjectURL(blob);
        let link = document.createElement("a");
        link.download = "custom-item.zip";
        link.href = url;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }).catch(function(error) {
        console.error(error);
    });
    
}

window.debug = function() {
    // fill input fields with values to quickly test the generator
    document.getElementById("name").value = "Test Item"
    document.getElementById("description").value = "This is a test item"
    document.getElementById("damage").value = "5"
    document.getElementById("attack-speed").value = "1"
    document.getElementById("durability-max").value = "10"
    document.getElementById("right-click-commands").value = "say Right click!"
    document.getElementById("on-hit-commands").value = "say Hit!"
    document.getElementById("on-kill-commands").value = "say Kill!"
    document.getElementById("right-click-action").value = "commands"
    document.getElementById("on-hit-action").value = "commands"
    document.getElementById("on-kill-action").value = "commands"
}

window.UUID_toString = function() {
    let UUID = []
    for (let i = 0; i < 4; i++) {
        UUID.push(Math.floor(Math.random() * 2147483647))
    }
    let asString = `[I;${UUID[0]}, ${UUID[1]}, ${UUID[2]}, ${UUID[3]}]`
    return asString
}

function changeDescription(key, attribute=false) {
    let title = document.getElementById("configuration-name")
    let description = document.getElementById("description-text")
    const json = fetch("descriptions.json")
        .then(response => response.json())
        .then(data => {
            if (!attribute) {
                title.innerHTML = data[key].title
                description.innerHTML = data[key].description
            }
            else {
                title.innerHTML = data.attributes[key].title
                description.innerHTML = data.attributes[key].description
            }
        })
}

window.functionalityManager = function(selection, div, label, input, textarea) {
    // Manages the functionality of configurables with run function/commands
    let value = selection.options[selection.selectedIndex].value
    if (value == "none") {
        div.style.display = "none"
        label.style.display = "none"
        input.style.display = "none"
        textarea.style.display = "none"

    }
    else if (value == "function") {
        div.style.display = "flex"
        label.innerHTML = "Function"
        label.style.display = "block"
        input.style.display = "block"
        textarea.style.display = "none"
        div.classList.remove('vert-align')
        div.classList.add('form-group')
    }
    else {
        div.style.display = "block"
        label.innerHTML = "Commands"
        input.style.display = "none"
        label.style.display = "block"
        textarea.style.display = "block"
        div.classList.remove('form-group')
        div.classList.add('vert-align')
    }
}

window.rightClickMethod = function() {
    let selection = document.getElementById('right-click-action')
    let label = document.getElementById('right-click-command-label')
    let input = document.getElementById('right-click-function')
    let textarea = document.getElementById('right-click-commands')
    let div = document.getElementById('right-click-functionality')
    functionalityManager(selection, div, label, input, textarea)
}

window.onHitMethod = function() {
    let selection = document.getElementById('on-hit-action')
    let label = document.getElementById('on-hit-command-label')
    let input = document.getElementById('on-hit-function')
    let textarea = document.getElementById('on-hit-commands')
    let div = document.getElementById('on-hit-functionality')
    functionalityManager(selection, div, label, input, textarea)
}

window.onKillMethod = function() {
    let selection = document.getElementById('on-kill-action')
    let label = document.getElementById('on-kill-command-label')
    let input = document.getElementById('on-kill-function')
    let textarea = document.getElementById('on-kill-commands')
    let div = document.getElementById('on-kill-functionality')
    functionalityManager(selection, div, label, input, textarea)
}

window.addAttribute = function() {
    let attribute = document.getElementById('attribute-selection').value
    let div = document.createElement('div')
    let label = document.createElement('label')
    let input = document.createElement('input')
    let button = document.createElement('input')
    button.type = "button"
    button.classList = "remove-attribute"
    button.value = "-"
    button.addEventListener('click', function() {div.remove()})
    const json = fetch("descriptions.json")
        .then(response => response.json())
        .then(data => {
            let atrElement = document.getElementById(attribute + "-div")
            atrElement.style.display = "block"
            
        })  
}

window.isItemOverriden = function() {
    let textbox = document.getElementById('base-item-override')
    let rightClickSelection = document.getElementById('right-click-action')
    if (textbox.value != "") {
        rightClickSelection.selectedIndex = 0
        rightClickSelection.disabled = true
        window.rightClickMethod()
        document.getElementById('no-right-click-warn').style.display = "block"
    }
    else {
        rightClickSelection.disabled = false
        document.getElementById('no-right-click-warn').style.display = "none"
    }
}

window.removeAttribute = function(element) {
    element.value = "none"
    element.parentElement.style.display = "none"
}

document.addEventListener('DOMContentLoaded', function() {
    // Visual effects
    let base_item = document.getElementById("configuration-base-item")
    let item_name = document.getElementById("configuration-item-name")
    let item_desc = document.getElementById("configuration-item-description")
    let right_click = document.getElementById("configuration-right-click")
    let on_hit = document.getElementById("configuration-on-hit")
    let on_kill = document.getElementById("configuration-on-kill")
    let attributes = document.getElementById("configuration-attributes")
    let damage = document.getElementById("damage-div")
    let attack_speed = document.getElementById("attack-speed-div")
    let unbreakable = document.getElementById("unbreakable-div")
    let custom_model_data = document.getElementById("custom-model-data-div")
    let max_durability = document.getElementById("durability-max-div")
    let download = document.getElementById("generate-pack")
    base_item.addEventListener('mouseover', function() {changeDescription("base-item"); base_item.style.background = "#303030"})
    base_item.addEventListener('mouseout', function() {base_item.style.background = "#2b2b2b"})
    item_name.addEventListener('mouseover', function() {changeDescription("item-name"); item_name.style.background = "#303030"})
    item_name.addEventListener('mouseout', function() {item_name.style.background = "#2b2b2b"})
    item_desc.addEventListener('mouseover', function() {changeDescription("item-description"); item_desc.style.background = "#303030"})
    item_desc.addEventListener('mouseout', function() {item_desc.style.background = "#2b2b2b"})
    right_click.addEventListener('mouseover', function() {changeDescription("on-right-click"); right_click.style.background = "#303030"})
    right_click.addEventListener('mouseout', function() {right_click.style.background = "#2b2b2b"})
    on_hit.addEventListener('mouseover', function() {changeDescription("on-hit"); on_hit.style.background = "#303030"})
    on_hit.addEventListener('mouseout', function() {on_hit.style.background = "#2b2b2b"})
    on_kill.addEventListener('mouseover', function() {changeDescription("on-kill"); on_kill.style.background = "#303030"})
    on_kill.addEventListener('mouseout', function() {on_kill.style.background = "#2b2b2b"})
    attributes.addEventListener('mouseover', function() {changeDescription("attribute"); attributes.style.background = "#303030"})
    attributes.addEventListener('mouseout', function() {attributes.style.background = "#2b2b2b"})
    
    damage.addEventListener('mouseover', function() {changeDescription("damage", true); damage.style.background = "#303030"})
    damage.addEventListener('mouseout', function() {damage.style.background = "#2b2b2b"})
    attack_speed.addEventListener('mouseover', function() {changeDescription("attack-speed", true); attack_speed.style.background = "#303030"})
    attack_speed.addEventListener('mouseout', function() {attack_speed.style.background = "#2b2b2b"})
    unbreakable.addEventListener('mouseover', function() {changeDescription("unbreakable", true); unbreakable.style.background = "#303030"})
    unbreakable.addEventListener('mouseout', function() {unbreakable.style.background = "#2b2b2b"})
    custom_model_data.addEventListener('mouseover', function() {changeDescription("custom-model-data", true); custom_model_data.style.background = "#303030"})
    custom_model_data.addEventListener('mouseout', function() {custom_model_data.style.background = "#2b2b2b"})
    max_durability.addEventListener('mouseover', function() {changeDescription("durability-max", true); max_durability.style.background = "#303030"})
    max_durability.addEventListener('mouseout', function() {max_durability.style.background = "#2b2b2b"})

    download.addEventListener('mouseover', function() {download.style.background = "#0077aa"})
    download.addEventListener('mouseout', function() {download.style.background = "#0099cc"})

    document.getElementById("right-click-action").selectedIndex = 0
    document.getElementById("on-hit-action").selectedIndex = 0
    document.getElementById("on-kill-action").selectedIndex = 0
}) 

